- docker run -it node
    --> This will execute node into the interactive mode

- docker stop <imagename>
- docker start <imagename>
- docker build is running in detached mode by default
- docker run is running in attached mode by default
- docker attach <containername>   
    attaches the container to the shell and ready to show any logs the container will be producing
- docker logs <containername>
    shows the history of the logs generated by the container
- docker logs -f <containername>
    show and follow the logs generated by the container with history
- docker logs -f --tail <lines> <containername>
    show the tail number of lines and follow the logs generated by the container with history
- docker start -a <containername>
    start the container but in attached mode by default    
- docker start -ai <containername>
    start and attach to the container in the interactive mode. Take a ref  of the python script

- docker rm <containername>
    to delete specific contain or multiple container seperated by space
- sudo docker container prune
    to delete all the containers which are stopped.
- sudo docker images
    to list all the images available on the local machine
- sudo docker rmi <imageid>
    to delete the specific image provided by image id
- sudo docker image prune
    to delete all the unused images from the machine
- sudo docker run -p 3000:3000 -d -rm <id>
    to mark the container in a way it will be deleted right after it stopped
- sudo docker run -p 3000:3000 -d -rm --name mywebapi <id>
    to assign the name to the container as mywebapi
- sudo docker build -t <reponame>:<tagname>
    this to assign the name and the tag to the repository
- sudo docker run -p 3000:3000 -d --name <containername> <imageid/imagename> 
    this to assign user friendly name to the container

- sudo docker build -t <username/reponame>:<tagname>
- sudo docker login  
- sudo docker push <username/reponame>:<tagname>
- sudo docker logout  